# jlse = Intel compiler w/ SYCL backend
# module load oneapi
# module load kokkos/sycl_intel_aot 

SHELL = /bin/sh

#COMPILER = Clang
COMPILER = IntelSDK

CHRIS_EXTRA := 

# ---------------------------------------------------------------------
# compiler/linker settings
# specify flags and libraries needed for your compiler

KOKKOS_DEVICES = "SYCL,OpenMP"

ifeq ($(COMPILER),Clang)
export MPICH_CXX=clang++

KOKKOS_HOME=/home/knightc/KOKKOS/build_clang_nvidia

KOKKOS_ARCH =   Volta70
COMMON_FLAGS =  -g -O3 -std=c++17 -ansi-alias -fopenmp
COMMON_FLAGS += -Wno-openmp-mapping
COMMON_FLAGS += -I$(KOKKOS_HOME)/include

CC =            mpigxx
CCFLAGS =       $(COMMON_FLAGS)
CCFLAGS +=      -DLAMMPS_MEMALIGN=64
SHFLAGS =       -fPIC
DEPFLAGS =      -M

LINK =          $(CC)
LINKFLAGS =     $(COMMON_FLAGS)
LIB =           -L$(TBBROOT)/lib/intel64/gcc4.8 -ltbbmalloc -lstdc++
SIZE =          size
endif

ifeq ($(COMPILER),IntelSDK)

KOKKOS_DEVICES = "SYCL"
KOKKOS_ARCH =   "BDW"
KOKKOS_HOME = /home/knightc/kokkos/build_icpx_sycl
#KOKKOS_HOME = $(KOKKOS_ROOT)
COMMON_FLAGS =  -O3 -fiopenmp -std=c++17 -ansi-alias
COMMON_FLAGS += --intel -fsycl -fsycl-unnamed-lambda
#COMMON_FLAGS += -fsycl-targets=spir64_gen-unknown-unknown-sycldevice -Xsycl-target-backend "-device xehp"
#COMMON_FLAGS += -fsycl-targets=spir64_gen -Xsycl-target-backend "-device 12.1.0,12.4.1"
#COMMON_FLAGS += -fsycl-targets=spir64_gen -Xsycl-target-backend "-device 12.50.4"
COMMON_FLAGS += -fsycl-targets=spir64_gen -Xsycl-target-backend "-device 12.60.7"
COMMON_FLAGS += -fdebug-info-for-profiling -gline-tables-only
COMMON_FLAGS += -I$(KOKKOS_HOME)/include
COMMON_FLAGS += $(CHRIS_EXTRA)

CC =            mpicxx
CCFLAGS =       $(COMMON_FLAGS)
CCFLAGS +=      -DLAMMPS_MEMALIGN=64
SHFLAGS =       -fPIC
DEPFLAGS =      -M

LINK =          $(CC)
LINKFLAGS =     $(COMMON_FLAGS)
LINKFLAGS +=    -fsycl-max-parallel-link-jobs=5
LIB =           -L$(TBBROOT)/lib/intel64/gcc4.8 -ltbbmalloc -lstdc++
LIB +=          ${KOKKOS_HOME}/lib64/libkokkoscore.a
LIB +=          ${KOKKOS_HOME}/lib64/libkokkoscontainers.a
SIZE =          size
endif

ARCHIVE =	ar
ARFLAGS =	-rc
SHLIBFLAGS =	-shared

# ---------------------------------------------------------------------
# LAMMPS-specific settings, all OPTIONAL
# specify settings for LAMMPS features you will use
# if you change any -D setting, do full re-compile after "make clean"

# LAMMPS ifdef settings
# see possible settings in Section 3.5 of the manual

LMP_INC =	-DLAMMPS_GZIP # -DLAMMPS_CXX98

# MPI library
# see discussion in Section 3.4 of the manual
# MPI wrapper compiler/linker can provide this info
# can point to dummy MPI library in src/STUBS as in Makefile.serial
# use -D MPICH and OMPI settings in INC to avoid C++ lib conflicts
# INC = path for mpi.h, MPI compiler settings
# PATH = path for MPI library
# LIB = name of MPI library

MPI_INC =       -DMPICH_SKIP_MPICXX -DOMPI_SKIP_MPICXX=1
MPI_PATH =
MPI_LIB =

# FFT library
# see discussion in Section 3.5.2 of manual
# can be left blank to use provided KISS FFT library
# INC = -DFFT setting, e.g. -DFFT_FFTW, FFT compiler settings
# PATH = path for FFT library
# LIB = name of FFT library

FFT_INC =
FFT_PATH =
FFT_LIB =

# JPEG and/or PNG library
# see discussion in Section 3.5.4 of manual
# only needed if -DLAMMPS_JPEG or -DLAMMPS_PNG listed with LMP_INC
# INC = path(s) for jpeglib.h and/or png.h
# PATH = path(s) for JPEG library and/or PNG library
# LIB = name(s) of JPEG library and/or PNG library

JPG_INC =
JPG_PATH =
JPG_LIB =

# ---------------------------------------------------------------------
# build rules and dependencies
# do not edit this section

include Makefile.package.settings
include Makefile.package

EXTRA_INC = $(LMP_INC) $(PKG_INC) $(MPI_INC) $(FFT_INC) $(JPG_INC) $(PKG_SYSINC)
EXTRA_PATH = $(PKG_PATH) $(MPI_PATH) $(FFT_PATH) $(JPG_PATH) $(PKG_SYSPATH)
EXTRA_LIB = $(PKG_LIB) $(MPI_LIB) $(FFT_LIB) $(JPG_LIB) $(PKG_SYSLIB)
EXTRA_CPP_DEPENDS = $(PKG_CPP_DEPENDS)
EXTRA_LINK_DEPENDS = $(PKG_LINK_DEPENDS)

# Path to src files

vpath %.cpp ..
vpath %.h ..

# Link target

$(EXE): main.o $(LMPLIB) $(EXTRA_LINK_DEPENDS)
	$(LINK) $(LINKFLAGS) main.o $(EXTRA_PATH) $(LMPLINK) $(EXTRA_LIB) $(LIB) -o $@
	$(SIZE) $@

# Library targets

$(ARLIB): $(OBJ) $(EXTRA_LINK_DEPENDS)
	@rm -f ../$(ARLIB)
	$(ARCHIVE) $(ARFLAGS) ../$(ARLIB) $(OBJ)
	@rm -f $(ARLIB)
	@ln -s ../$(ARLIB) $(ARLIB)

$(SHLIB): $(OBJ) $(EXTRA_LINK_DEPENDS)
	$(CC) $(CCFLAGS) $(SHFLAGS) $(SHLIBFLAGS) $(EXTRA_PATH) -o ../$(SHLIB) \
		$(OBJ) $(EXTRA_LIB) $(LIB)
	@rm -f $(SHLIB)
	@ln -s ../$(SHLIB) $(SHLIB)

# Compilation rules

%.o:%.cpp
	$(CC) $(CCFLAGS) $(SHFLAGS) $(EXTRA_INC) -c $<

# Individual dependencies

depend : fastdep.exe $(SRC)
	@./fastdep.exe $(EXTRA_INC) -- $^ > .depend || exit 1

fastdep.exe: ../DEPEND/fastdep.c
	icx -O -o $@ $<

sinclude .depend
